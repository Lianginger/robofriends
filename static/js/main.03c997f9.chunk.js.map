{"version":3,"sources":["components/SearchBox.js","components/Scroll.js","components/Card.js","components/CardList.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","robots","onSearchChange","className","type","placeholder","onChange","Scroll","children","style","overflowY","borderTop","height","Card","id","name","email","key","src","alt","CardList","map","ErrorBoundary","props","state","hasError","error","errorInfo","console","log","this","React","Component","App","useState","searchField","setState","filteredRobots","filter","robot","toLowerCase","includes","handleSearchFieldDebounce","debounce","searchFieldValue","useEffect","fetch","then","res","json","users","e","target","value","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"iQAeeA,MAbf,YAA+C,EAA1BC,OAA2B,IAAnBC,EAAkB,EAAlBA,eAC3B,OACE,yBAAKC,UAAU,OACb,2BACEA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCOHK,MAdf,YAA+B,IAAbC,EAAY,EAAZA,SAChB,OACE,yBACEC,MAAO,CACLC,UAAW,SACXC,UAAW,kBACXC,OAAQ,SAGTJ,ICGQK,MAZf,YAAoC,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACxB,OACE,yBAAKC,IAAKH,EAAIX,UAAU,oDACtB,yBAAKe,IAAG,+BAA0BJ,EAA1B,KAAiCK,IAAKJ,IAC9C,6BACE,4BAAKA,GACL,2BAAIC,MCKGI,MAVf,YAA+B,IAAXnB,EAAU,EAAVA,OAClB,OACE,6BACGA,EAAOoB,KAAI,gBAAGP,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAb,OACV,kBAAC,EAAD,CAAMC,IAAKH,EAAIA,GAAIA,EAAIC,KAAMA,EAAMC,MAAOA,S,4BCqBnCM,E,kDAzBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,UAAU,GAFR,E,8DAUDC,EAAOC,GAEvBC,QAAQC,IAAIH,EAAOC,K,+BAInB,OAAIG,KAAKN,MAAMC,SAEN,qDAGFK,KAAKP,MAAMf,Y,gDAhBYkB,GAE9B,MAAO,CAAED,UAAU,O,GARKM,IAAMC,W,MC4DnBC,MApDf,WAAgB,IAAD,EACaC,mBAAS,CACjCjC,OAAQ,GACRkC,YAAa,KAHF,mBACNX,EADM,KACCY,EADD,KAKLnC,EAAwBuB,EAAxBvB,OAAQkC,EAAgBX,EAAhBW,YACVE,EACJpC,EAAOqC,QAAO,SAACC,GAAD,OACZA,EAAMxB,KAAKyB,cAAcC,SAASN,EAAYK,mBAC3C,GACDE,EAA4BC,oBAkClC,SAA2BC,GACzBR,GAAS,SAACZ,GAAD,mBAAC,eACLA,GADI,IAEPW,YAAaS,SArC6C,KAa9D,OAXAC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLd,GAAS,SAACZ,GAAD,mBAAC,eACLA,GADI,IAEPvB,OAAQiD,YAGb,IAGD,yBAAK/C,UAAU,MACb,kBAAC,EAAD,KACE,wBAAIA,UAAU,MAAd,cACA,kBAAC,EAAD,CAAWD,eAYjB,SAAwBiD,GACtB,IAAMP,EAAmBO,EAAEC,OAAOC,MAClCX,EAA0BE,MAbtB,kBAAC,EAAD,KACG3C,EAAOqD,OACN,kBAAC,EAAD,CAAUrD,OAAQoC,IAElB,8C,MC9BQkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACLE,QAAQF,MAAMA,EAAM6C,c","file":"static/js/main.03c997f9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction SearchBox({ robots, onSearchChange }) {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={onSearchChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox\r\n","import React from 'react'\r\n\r\nfunction Scroll({ children }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: 'scroll',\r\n        borderTop: '5px solid black',\r\n        height: '80vh',\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll\r\n","import React from 'react'\r\n\r\nfunction Card({ id, name, email }) {\r\n  return (\r\n    <div key={id} className='bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n      <img src={`https://robohash.org/${id}?`} alt={name} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\nfunction CardList({ robots }) {\r\n  return (\r\n    <div>\r\n      {robots.map(({ id, name, email }) => (\r\n        <Card key={id} id={id} name={name} email={email} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react'\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // 更新 state 以至於下一個 render 會顯示 fallback UI\r\n    return { hasError: true }\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // 你也可以把錯誤記錄到一個錯誤回報系統服務\r\n    console.log(error, errorInfo)\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // 你可以 render 任何客製化的 fallback UI\r\n      return <h1>Something went wrong.</h1>\r\n    }\r\n\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import React, { useState, useEffect } from 'react'\r\nimport { debounce } from 'lodash'\r\n\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport CardList from '../components/CardList'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  const [state, setState] = useState({\r\n    robots: [],\r\n    searchField: '',\r\n  })\r\n  const { robots, searchField } = state\r\n  const filteredRobots =\r\n    robots.filter((robot) =>\r\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    ) || []\r\n  const handleSearchFieldDebounce = debounce(handleSearchField, 250)\r\n\r\n  useEffect(() => {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then((res) => res.json())\r\n      .then((users) => {\r\n        setState((state) => ({\r\n          ...state,\r\n          robots: users,\r\n        }))\r\n      })\r\n  }, [])\r\n\r\n  return (\r\n    <div className='tc'>\r\n      <ErrorBoundary>\r\n        <h1 className='f2'>RoboFriend</h1>\r\n        <SearchBox onSearchChange={onSearchChange} />\r\n        <Scroll>\r\n          {robots.length ? (\r\n            <CardList robots={filteredRobots} />\r\n          ) : (\r\n            <h4>loading...</h4>\r\n          )}\r\n        </Scroll>\r\n      </ErrorBoundary>\r\n    </div>\r\n  )\r\n\r\n  function onSearchChange(e) {\r\n    const searchFieldValue = e.target.value\r\n    handleSearchFieldDebounce(searchFieldValue)\r\n  }\r\n\r\n  function handleSearchField(searchFieldValue) {\r\n    setState((state) => ({\r\n      ...state,\r\n      searchField: searchFieldValue,\r\n    }))\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './containers/App'\n\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}